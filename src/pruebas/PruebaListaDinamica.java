package pruebas;

import entradasalida.SalidaPorDefecto;
import estructurasLineales.ListaDinamica;
import estructurasLineales.ListaEstatica;
import estructurasnolineales.Matriz2;
import utilerias.comunes.TipoTabla;

public class PruebaListaDinamica {
    public static void main(String[] args) {
        ListaDinamica lista = new ListaDinamica();
        lista.agregar("A");
        lista.agregar("B");
        lista.agregar("Z");
        lista.agregarInicio("S");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nEliminando el del final: "+lista.eliminar()+"\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nEliminando el del inicio: "+lista.eliminarInicio()+"\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nEliminando el del inicio: "+lista.eliminarInicio()+"\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\n");
        lista.agregar("F");
        lista.agregar("U");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nEliminando: "+lista.eliminar("B")+"\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\n");
        lista.imprimirOI();
        SalidaPorDefecto.terminal("\nBuscando U: "+lista.buscar("U")+"\n");
        SalidaPorDefecto.terminal("\nProbando aListaEstatica\n");
        ListaEstatica listilla = lista.aListaEstatica();
        listilla.imprimir();
        lista.agregar("X");
        lista.agregar("S");
        SalidaPorDefecto.terminal("\n");
        lista.imprimir();
        ListaEstatica listaDescartados = new ListaEstatica(2);
        listaDescartados.agregar("B");
        listaDescartados.agregar("S");
        listilla = lista.aListaEstatica(listaDescartados);
        SalidaPorDefecto.terminal("\nProbemos si descarta 'B' y 'S' :\n");
        listilla.imprimir();
        SalidaPorDefecto.terminal("\n");
        Matriz2 matrizmaschica = lista.aMatriz2d(3, 2);
        matrizmaschica.imprimirPorRenglones();
        SalidaPorDefecto.terminal("\n");
        Matriz2 matrizmasgrande = lista.aMatriz2d(6, 7);
        matrizmasgrande.imprimirPorRenglones();
        SalidaPorDefecto.terminal("\n");
        SalidaPorDefecto.terminal("\nProbando agregar la listilla a la actual: "+lista.agregarLista(listilla)+"\n");
        lista.imprimir();
        ListaDinamica lista2 = (ListaDinamica) lista.clonar();
        SalidaPorDefecto.terminal("\nProbemos a tener una nueva lista clonada:");
        SalidaPorDefecto.terminal("\n  - Lista Original: ");
        lista.imprimir();
        SalidaPorDefecto.terminal("\n  - Lista Clonada: ");
        lista2.imprimir();
        SalidaPorDefecto.terminal("\nModificamos al clon, agregando 3 y 6:");
        lista2.agregar(3);
        lista2.agregar(6);
        SalidaPorDefecto.terminal("\nVerificamos: ");
        SalidaPorDefecto.terminal("\n  - Lista Original: ");
        lista.imprimir();
        SalidaPorDefecto.terminal("\n  - Lista Clonada: ");
        lista2.imprimir();
        SalidaPorDefecto.terminal("\n");
        Matriz2 matriz = new Matriz2(2, 3);
        matriz.cambiar(0, 0, "K");
        matriz.cambiar(0, 1, "I");
        matriz.cambiar(0, 2, "R");
        matriz.cambiar(1, 0, "T");
        matriz.cambiar(1, 1, "U");
        matriz.cambiar(1, 2, "V");
        matriz.imprimirPorRenglones();
        SalidaPorDefecto.terminal("\n");
        lista.agregarMatriz2D(matriz, TipoTabla.RENGLON);
        lista.imprimir();
        SalidaPorDefecto.terminal("\n");
        lista.vaciar();
        lista.imprimir();
        lista.rellenar("X", 4);
        SalidaPorDefecto.terminal("\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nProbando el metodo que cuenta, se tiene a 'X': "+lista.contar("X")+" veces.");
        SalidaPorDefecto.terminal("\nProbando el metodo que cuenta, se tiene a 'B': "+lista.contar("B")+" veces.\n");
        lista.vaciar();
        SalidaPorDefecto.terminal("\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\n");
        lista.agregar("X");
        lista.agregar("Y");
        lista.agregar("Z");
        SalidaPorDefecto.terminal("\nProbando la inversion de la lista:\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\n");
        lista.invertir();
        lista.imprimir();
        SalidaPorDefecto.terminal("\nProbando el cambiar:"+lista.cambiar(1, "A")+".\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nProbando el obtener 1:"+lista.obtener(1)+".\n");
        SalidaPorDefecto.terminal("\nProbando el obtener 2:"+lista.obtener(2)+".\n");
        SalidaPorDefecto.terminal("\nProbando el obtener caso nulo:"+lista.obtener(7)+".\n");
        SalidaPorDefecto.terminal("\nProbando el obtener caso nulo:"+lista.obtener(-1)+".\n");
        SalidaPorDefecto.terminal("\nProbando el metodo de si son iguales: "+lista.esIgual(lista)+".");
        SalidaPorDefecto.terminal("\nProbando el metodo de si son iguales: "+lista.esIgual(lista2)+".");
        SalidaPorDefecto.terminal("\nProbando el metodo de redimensionar chiquito: "+lista.redimensionar(2)+".\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nProbando el metodo de redimensionar: "+lista.redimensionar(5)+".\n");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nProbando el metodo de eliminar con indices: "+lista.eliminar(5)+".\n");
        SalidaPorDefecto.terminal("\nProbando el metodo de eliminar con indices: "+lista.eliminar(0)+".\n");
        lista.imprimir();
        lista.vacia();
        lista.rellenar("A", 5);
        SalidaPorDefecto.terminal("\n");
        lista.imprimir();
        lista.cambiar("A", "B", 3);
        SalidaPorDefecto.terminal("\n");
        lista.eliminar("A");
        lista.imprimir();
        SalidaPorDefecto.terminal("\nProbando la cantidad total: "+lista.cantidad());
    }
}
